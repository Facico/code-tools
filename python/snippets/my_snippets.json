{
	"ipdb": {
		"prefix": "ipdb",
		"body":[
			"import pdb;pdb.set_trace()",
		],
		"description": "import pdb;pdb.set_trace()"
	},
	"ipdbm": {
		"prefix": "ipdbm",
		"body":[
			"import pdb;pdb.multi_set_trace()",
		],
	},
	"ex-ipdbm":{
		"prefix": "ex-ipdbm",
		"body": [
			"import sys",
			"import pdb",
			"",
			"class ForkedPdb(pdb.Pdb):",
    		"	def interaction(self, *args, **kwargs):",
        	"		_stdin = sys.stdin",
        	"		try:",
            "			sys.stdin = open('/dev/stdin')",
            "			pdb.Pdb.interaction(self, *args, **kwargs)",
        	"		finally:",
            "			sys.stdin = _stdin",
			"",
			"ForkedPdb().set_trace()",
		]
	},
	"openjson": {
		"prefix": "openjson",
		"body": [
			"with open(path, \"r\", encoding=\"utf-8\") as f:",
			"	data = json.load(f)",
		]
	},
	"savejson":{
		"prefix": "savejson",
		"body": [
			"with open(path, \"w\", encoding=\"utf-8\") as f:",
			"	json.dump(data, f, indent=2, ensure_ascii=False)"
		]
	},
	"fordict":{
		"prefix": "fordict",
		"body": [
			"for k, v in data.items():",
			"	print(k)"
		]
	},
	"makeparser":{
		"prefix": "makeparser",
		"body": [
			"parser = argparse.ArgumentParser(add_help=False)",
			"parser.add_argument(\"--wandb\", action=\"store_true\", default=False)",
			"parser.add_argument(\"--litmodel_class\", type=str, default=\"TransformerLitModel\", choices=['a', 'b', 'c'])",
			"parser.add_argument(\"--seed\", type=int, default=7)",
			"args = parser.parse_args()"
		]
	},
	"pdbmain":{
		"prefix": "pdbmain",
		"body": [
			"try:",
        	"	main()",
			"except:",
			"	import sys,pdb,bdb",
			"	type, value, tb = sys.exc_info()",
			"	if type == bdb.BdbQuit:",
			"		exit()",
			"	print(type,value)",
			"	pdb.post_mortem(tb)",
		]
	}
}